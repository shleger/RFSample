#------------------------------------------------------------------------------
# Loggen der Meldungen
#
# Weitere Infos:
#		http://www.torsten-horn.de/techdocs/java-log4j.htm
#		http://www.vipan.com/htdocs/log4jhelp.html
#		http://commons.apache.org/logging/commons-logging-1.0.3/usersguide.html
#
#

#
# To use this configuration, deploy it into your application's WEB-INF/classes
# directory.  You are also encouraged to edit it as you like.

log4j.rootLogger=DEBUG, Console
#, RollingFile

#----------- iBatis-Logging ----------------
#
log4j.logger.com.ibatis=DEBUG 
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG 
log4j.logger.com.ibatis.sqlmap.engine.cache.CacheModel=DEBUG 
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientImpl=DEBUG 
log4j.logger.com.ibatis.sqlmap.engine.builder.xml.SqlMapParser=DEBUG 
log4j.logger.com.ibatis.common.util.StopWatch=DEBUG 

log4j.logger.java.sql.Connection=DEBUG 
log4j.logger.java.sql.Statement=DEBUG 
log4j.logger.java.sql.PreparedStatement=DEBUG 
log4j.logger.java.sql.ResultSet=DEBUG 

#----------- Console-Logging ----------------
#
#log4j.appender.Console.Threshold=INFO
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d{ISO8601} SRV [%c] %m%n

#----------- File-Logging ----------------
#
log4j.appender.RollingFile=org.apache.log4j.RollingFileAppender
log4j.appender.RollingFile.File=${catalina.home}/logs/zodiacserver.log 

log4j.appender.RollingFile.MaxFileSize=5MB
# Keep one backup file
log4j.appender.RollingFile.MaxBackupIndex=7

log4j.appender.RollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingFile.layout.ConversionPattern=%d{ISO8601} [%t] %c: %m%n



# Configure the console as our one appender
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%d{HH:mm:ss,SSS} %-5p [%c] - %m%n

# tighten logging on the DataNucleus Categories
log4j.category.DataNucleus.JDO=WARN, A1
log4j.category.DataNucleus.Persistence=WARN, A1
log4j.category.DataNucleus.Cache=WARN, A1
log4j.category.DataNucleus.MetaData=WARN, A1
log4j.category.DataNucleus.General=WARN, A1
log4j.category.DataNucleus.Utility=WARN, A1
log4j.category.DataNucleus.Transaction=WARN, A1
log4j.category.DataNucleus.Datastore=WARN, A1
log4j.category.DataNucleus.ClassLoading=WARN, A1
log4j.category.DataNucleus.Plugin=WARN, A1
log4j.category.DataNucleus.ValueGeneration=WARN, A1
log4j.category.DataNucleus.Enhancer=WARN, A1
log4j.category.DataNucleus.SchemaTool=WARN, A1

#----------- Conversion characters are ----------------
#
# %m: Outputs your message.

# %p: Outputs the priority of the logging event.

# %r: Outputs the number of milliseconds elapsed since the start of the application until the creation of the logging event.

# %c: Outputs the category of the logging event. Example: For the category name "a.b.c", 
#		the pattern %c{2} will output "b.c". {2} means "output last two components of the dot-separated 
#		category name". If no {n} is there, full Category name is output by default.
# %t: Outputs the name of the thread that generated the logging event.

# %x: Outputs the nested diagnostic context (NDC) associated with the thread that generated the logging 
#		event. Useful when multiple clients are handled by separate threads such as in Java servlets.

# %n: Outputs the platform-dependent newline character(s). Preferable to specifying "\n" or "\r\n" etc.

# %%: Outputs a single percent sign.

# WARNING: The patterns below will slow down the execution of your program somewhat. Avoid unless execution speed is not an issue.
# %d: Outputs the date of the logging event. The date conversion specifier may be followed by a date 
#		format specifier enclosed between braces. Example: %d{HH:mm:ss,SSS} or %d{dd MMM yyyy HH:mm:ss,SSS}. 
#		If no date format specifier is given then ISO8601 format is assumed. The date format specifier 
#		admits the same syntax as the time pattern string of Java's SimpleDateFormat which is slow. 
#		For faster performance, use %d{ISO8601}, %d{ABSOLUTE}, %d{RELATIVE} 
#		(millisecs since program start, fastest) or %d{DATE} which use log4j's ISO8601DateFormat, 
#		AbsoluteTimeDateFormat, RelativeTimeDateFormat and DateTimeDateFormat date formatters respectively.

# %l: Outputs source code location information. Shortcut for %C.%M(%F:%L).

# %C: Outputs the fully-qualified class name of the caller issuing the logging request. 
#		xample: For the class name "org.apache.xyz.SomeClass", the pattern %C{1} will output "SomeClass". {1} 
#		means "output last one component of the fully-qualified class name". If no {n} is there, 
#		full class name is output by default.
# %M: Outputs the method name where the logging request was issued.

# %F: Outputs the file name where the logging request was issued.

# %L: Outputs the line number from where the logging request was issued. 

#----------- Optionally, use format modifiers between the percent sign and the conversion character to change the minimum field width, the maximum field width and text justification within a field. ----------------
#
# Use the minus sign (-) to left-justify within a field. Default is to right-justify (pad on left).
# Use a positive integer to specify the minimum field width. If the data item requires fewer characters,
#		it is padded with space(s) on either the left or the right until the minimum width is reached. 
#		If the data item is larger than the minimum field width, the field is expanded to accommodate the data.
# Use a period followed by a positive integer to specify the maximum field width. If the data item is 
#		longer than the maximum field, then the extra characters are removed from the beginning of the 
#		data item and not from the end. For example, it the maximum field width is eight and the data 
#		item is ten characters long, then the first two characters of the data item are dropped. 
#		This behavior deviates from the printf function in C where truncation is done from the end. 

#----------- Examples ----------------
#
# %20c: Right-justify (by default) the category name within 20 spaces minimum.

# %-20c: Left-justify the category name within 20 spaces minimum.

# %.30c: If the category name is longer than 30 characters, truncate (from the beginning). 
#		No minimum width and therefore, no padding if shorter than 30 characters.

# %20.30c: Right-justify if the category name is shorter than 20 characters. 
#		If category name is longer than 30 characters, then truncate from the beginning.

# %-20.30c: Left-justify if the category name is shorter than 20 characters. 
#		If category name is longer than 30 characters, then truncate from the beginning.

# %r [%t] %-5p %c %x - %m\n: This is essentially the TTCCLayout.

# %-6r [%15.15t] %-5p %30.30c %x - %m\n: Similar to the TTCCLayout except that the relative 
#		time is right padded if less than 6 digits, thread name is right padded if less than 15 characters
#		and truncated if longer, and the category name is left padded if shorter than 30 characters
#		and truncated if longer. 
